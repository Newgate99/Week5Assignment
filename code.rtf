{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red89\green138\blue67;\red23\green23\blue23;\red202\green202\blue202;
\red183\green111\blue179;\red140\green211\blue254;\red70\green137\blue204;\red194\green126\blue101;\red67\green192\blue160;
\red212\green214\blue154;\red167\green197\blue152;}
{\*\expandedcolortbl;;\cssrgb\c41569\c60000\c33333;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c77255\c52549\c75294;\cssrgb\c61176\c86275\c99608;\cssrgb\c33725\c61176\c83922;\cssrgb\c80784\c56863\c47059;\cssrgb\c30588\c78824\c69020;
\cssrgb\c86275\c86275\c66667;\cssrgb\c70980\c80784\c65882;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # Import required libraries\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb3 \strokec5 import\cf4 \strokec4  pandas \cf5 \strokec5 as\cf4 \strokec4  pd\cb1 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  dash\cb1 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  dash_html_components \cf5 \strokec5 as\cf4 \strokec4  html\cb1 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  dash_core_components \cf5 \strokec5 as\cf4 \strokec4  dcc\cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4  dash.dependencies \cf5 \strokec5 import\cf4 \strokec4  Input, Output, State\cb1 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  plotly.graph_objects \cf5 \strokec5 as\cf4 \strokec4  go\cb1 \
\cf5 \cb3 \strokec5 import\cf4 \strokec4  plotly.express \cf5 \strokec5 as\cf4 \strokec4  px\cb1 \
\cf5 \cb3 \strokec5 from\cf4 \strokec4  dash \cf5 \strokec5 import\cf4 \strokec4  no_update\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # Create a dash application\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 app = dash.Dash(\cf6 \strokec6 __name__\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # REVIEW1: Clear the layout and do not display exception till callback gets executed\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 app.config.suppress_callback_exceptions = \cf7 \strokec7 True\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # Read the airline data into pandas dataframe\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 airline_data =  pd.read_csv(\cf8 \strokec8 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data\cf7 \strokec7 %20F\cf8 \strokec8 iles/airline_data.csv'\cf4 \strokec4 , \cb1 \
\cb3                             \cf6 \strokec6 encoding\cf4 \strokec4  = \cf8 \strokec8 "ISO-8859-1"\cf4 \strokec4 ,\cb1 \
\cb3                             \cf6 \strokec6 dtype\cf4 \strokec4 =\{\cf8 \strokec8 'Div1Airport'\cf4 \strokec4 : \cf9 \strokec9 str\cf4 \strokec4 , \cf8 \strokec8 'Div1TailNum'\cf4 \strokec4 : \cf9 \strokec9 str\cf4 \strokec4 , \cb1 \
\cb3                                    \cf8 \strokec8 'Div2Airport'\cf4 \strokec4 : \cf9 \strokec9 str\cf4 \strokec4 , \cf8 \strokec8 'Div2TailNum'\cf4 \strokec4 : \cf9 \strokec9 str\cf4 \strokec4 \})\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # List of years \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 year_list = [i \cf5 \strokec5 for\cf4 \strokec4  i \cf7 \strokec7 in\cf4 \strokec4  \cf10 \strokec10 range\cf4 \strokec4 (\cf11 \strokec11 2005\cf4 \strokec4 , \cf11 \strokec11 2021\cf4 \strokec4 , \cf11 \strokec11 1\cf4 \strokec4 )]\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf8 \cb3 \strokec8 """Compute graph data for creating yearly airline performance report \cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 Function that takes airline data as input and create 5 dataframes based on the grouping condition to be used for plottling charts and grphs.\cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 Argument:\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8      \cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8     df: Filtered dataframe\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8     \cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 Returns:\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8    Dataframes to create graph. \cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 """\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb3 \strokec7 def\cf4 \strokec4  \cf10 \strokec10 compute_data_choice_1\cf4 \strokec4 (\cf6 \strokec6 df\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 # Cancellation Category Count\cf4 \cb1 \strokec4 \
\cb3     bar_data = df.groupby([\cf8 \strokec8 'Month'\cf4 \strokec4 ,\cf8 \strokec8 'CancellationCode'\cf4 \strokec4 ])[\cf8 \strokec8 'Flights'\cf4 \strokec4 ].sum().reset_index()\cb1 \
\cb3     \cf2 \strokec2 # Average flight time by reporting airline\cf4 \cb1 \strokec4 \
\cb3     line_data = df.groupby([\cf8 \strokec8 'Month'\cf4 \strokec4 ,\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 ])[\cf8 \strokec8 'AirTime'\cf4 \strokec4 ].mean().reset_index()\cb1 \
\cb3     \cf2 \strokec2 # Diverted Airport Landings\cf4 \cb1 \strokec4 \
\cb3     div_data = df[df[\cf8 \strokec8 'DivAirportLandings'\cf4 \strokec4 ] != \cf11 \strokec11 0.0\cf4 \strokec4 ]\cb1 \
\cb3     \cf2 \strokec2 # Source state count\cf4 \cb1 \strokec4 \
\cb3     map_data = df.groupby([\cf8 \strokec8 'OriginState'\cf4 \strokec4 ])[\cf8 \strokec8 'Flights'\cf4 \strokec4 ].sum().reset_index()\cb1 \
\cb3     \cf2 \strokec2 # Destination state count\cf4 \cb1 \strokec4 \
\cb3     tree_data = df.groupby([\cf8 \strokec8 'DestState'\cf4 \strokec4 , \cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 ])[\cf8 \strokec8 'Flights'\cf4 \strokec4 ].sum().reset_index()\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  bar_data, line_data, div_data, map_data, tree_data\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf8 \cb3 \strokec8 """Compute graph data for creating yearly airline delay report\cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 This function takes in airline data and selected year as an input and performs computation for creating charts and plots.\cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 Arguments:\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8     df: Input airline data.\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8     \cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 Returns:\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8     Computed average dataframes for carrier delay, weather delay, NAS delay, security delay, and late aircraft delay.\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 """\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb3 \strokec7 def\cf4 \strokec4  \cf10 \strokec10 compute_data_choice_2\cf4 \strokec4 (\cf6 \strokec6 df\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 # Compute delay averages\cf4 \cb1 \strokec4 \
\cb3     avg_car = df.groupby([\cf8 \strokec8 'Month'\cf4 \strokec4 ,\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 ])[\cf8 \strokec8 'CarrierDelay'\cf4 \strokec4 ].mean().reset_index()\cb1 \
\cb3     avg_weather = df.groupby([\cf8 \strokec8 'Month'\cf4 \strokec4 ,\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 ])[\cf8 \strokec8 'WeatherDelay'\cf4 \strokec4 ].mean().reset_index()\cb1 \
\cb3     avg_NAS = df.groupby([\cf8 \strokec8 'Month'\cf4 \strokec4 ,\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 ])[\cf8 \strokec8 'NASDelay'\cf4 \strokec4 ].mean().reset_index()\cb1 \
\cb3     avg_sec = df.groupby([\cf8 \strokec8 'Month'\cf4 \strokec4 ,\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 ])[\cf8 \strokec8 'SecurityDelay'\cf4 \strokec4 ].mean().reset_index()\cb1 \
\cb3     avg_late = df.groupby([\cf8 \strokec8 'Month'\cf4 \strokec4 ,\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 ])[\cf8 \strokec8 'LateAircraftDelay'\cf4 \strokec4 ].mean().reset_index()\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  avg_car, avg_weather, avg_NAS, avg_sec, avg_late\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # Application layout\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 app.layout = html.Div(\cf6 \strokec6 children\cf4 \strokec4 =[ \cb1 \
\cb3                                 \cf2 \strokec2 # TASK1: Add title to the dashboard\cf4 \cb1 \strokec4 \
\cb3                                 \cf2 \strokec2 # Enter your code below. Make sure you have correct formatting.\cf4 \cb1 \strokec4 \
\cb3                                 html.H1(\cf8 \strokec8 'US Domestic Airline Flights Performance'\cf4 \strokec4 ,\cb1 \
\cb3                                 \cf6 \strokec6 style\cf4 \strokec4 =\{\cf8 \strokec8 'textAlign'\cf4 \strokec4 : \cf8 \strokec8 'center'\cf4 \strokec4 , \cf8 \strokec8 'color'\cf4 \strokec4 : \cf8 \strokec8 '#503D36'\cf4 \strokec4 , \cf8 \strokec8 'font-size'\cf4 \strokec4 : \cf11 \strokec11 24\cf4 \strokec4 \}),\cb1 \
\cb3                                 \cf2 \strokec2 # REVIEW2: Dropdown creation\cf4 \cb1 \strokec4 \
\cb3                                 \cf2 \strokec2 # Create an outer division \cf4 \cb1 \strokec4 \
\cb3                                 html.Div([\cb1 \
\cb3                                     \cf2 \strokec2 # Add an division\cf4 \cb1 \strokec4 \
\cb3                                     html.Div([\cb1 \
\cb3                                         \cf2 \strokec2 # Create an division for adding dropdown helper text for report type\cf4 \cb1 \strokec4 \
\cb3                                         html.Div(\cb1 \
\cb3                                             [\cb1 \
\cb3                                             html.H2(\cf8 \strokec8 'Report Type:'\cf4 \strokec4 , \cf6 \strokec6 style\cf4 \strokec4 =\{\cf8 \strokec8 'margin-right'\cf4 \strokec4 : \cf8 \strokec8 '2em'\cf4 \strokec4 \}),\cb1 \
\cb3                                             ]\cb1 \
\cb3                                         ),\cb1 \
\cb3                                         \cf2 \strokec2 # TASK2: Add a dropdown\cf4 \cb1 \strokec4 \
\cb3                                         \cf2 \strokec2 # Enter your code below. Make sure you have correct formatting.\cf4 \cb1 \strokec4 \
\cb3                                         dcc.Dropdown(\cb1 \
\cb3                                             \cf6 \strokec6 id\cf4 \strokec4 =\cf8 \strokec8 'input-type'\cf4 \strokec4 ,\cb1 \
\cb3                                             \cf6 \strokec6 options\cf4 \strokec4 =[\cb1 \
\cb3                                                 \{\cf8 \strokec8 'label'\cf4 \strokec4 :\cf8 \strokec8 'Yearly Airline Performance Report'\cf4 \strokec4 ,\cf8 \strokec8 'value'\cf4 \strokec4 :\cf8 \strokec8 'OPT1'\cf4 \strokec4 \},\cb1 \
\cb3                                                 \{\cf8 \strokec8 'label'\cf4 \strokec4 :\cf8 \strokec8 'Yearly Airline Delay'\cf4 \strokec4 ,\cf8 \strokec8 'value'\cf4 \strokec4 :\cf8 \strokec8 'OPT2'\cf4 \strokec4 \}],\cb1 \
\cb3                                                 \cf6 \strokec6 placeholder\cf4 \strokec4 =\cf8 \strokec8 'Select a report type'\cf4 \strokec4 ,\cb1 \
\cb3                                                 \cf6 \strokec6 style\cf4 \strokec4 =\{\cf8 \strokec8 'width'\cf4 \strokec4 :\cf8 \strokec8 '80%'\cf4 \strokec4 , \cf8 \strokec8 'padding'\cf4 \strokec4 :\cf8 \strokec8 '3px'\cf4 \strokec4 , \cf8 \strokec8 'font-size'\cf4 \strokec4 :\cf8 \strokec8 '20px'\cf4 \strokec4 ,\cf8 \strokec8 'textAlign'\cf4 \strokec4 : \cf8 \strokec8 'center'\cf4 \strokec4  \}\cb1 \
\cb3                                         )\cb1 \
\cb3                                     \cf2 \strokec2 # Place them next to each other using the division style\cf4 \cb1 \strokec4 \
\cb3                                     ], \cf6 \strokec6 style\cf4 \strokec4 =\{\cf8 \strokec8 'display'\cf4 \strokec4 :\cf8 \strokec8 'flex'\cf4 \strokec4 \}),\cb1 \
\cb3                                     \cb1 \
\cb3                                    \cf2 \strokec2 # Add next division \cf4 \cb1 \strokec4 \
\cb3                                    html.Div([\cb1 \
\cb3                                        \cf2 \strokec2 # Create an division for adding dropdown helper text for choosing year\cf4 \cb1 \strokec4 \
\cb3                                         html.Div(\cb1 \
\cb3                                             [\cb1 \
\cb3                                             html.H2(\cf8 \strokec8 'Choose Year:'\cf4 \strokec4 , \cf6 \strokec6 style\cf4 \strokec4 =\{\cf8 \strokec8 'margin-right'\cf4 \strokec4 : \cf8 \strokec8 '2em'\cf4 \strokec4 \})\cb1 \
\cb3                                             ]\cb1 \
\cb3                                         ),\cb1 \
\cb3                                         dcc.Dropdown(\cf6 \strokec6 id\cf4 \strokec4 =\cf8 \strokec8 'input-year'\cf4 \strokec4 , \cb1 \
\cb3                                                      \cf2 \strokec2 # Update dropdown values using list comphrehension\cf4 \cb1 \strokec4 \
\cb3                                                      \cf6 \strokec6 options\cf4 \strokec4 =[\{\cf8 \strokec8 'label'\cf4 \strokec4 : i, \cf8 \strokec8 'value'\cf4 \strokec4 : i\} \cf5 \strokec5 for\cf4 \strokec4  i \cf7 \strokec7 in\cf4 \strokec4  year_list],\cb1 \
\cb3                                                      \cf6 \strokec6 placeholder\cf4 \strokec4 =\cf8 \strokec8 "Select a year"\cf4 \strokec4 ,\cb1 \
\cb3                                                      \cf6 \strokec6 style\cf4 \strokec4 =\{\cf8 \strokec8 'width'\cf4 \strokec4 :\cf8 \strokec8 '80%'\cf4 \strokec4 , \cf8 \strokec8 'padding'\cf4 \strokec4 :\cf8 \strokec8 '3px'\cf4 \strokec4 , \cf8 \strokec8 'font-size'\cf4 \strokec4 : \cf8 \strokec8 '20px'\cf4 \strokec4 , \cf8 \strokec8 'text-align-last'\cf4 \strokec4  : \cf8 \strokec8 'center'\cf4 \strokec4 \}),\cb1 \
\cb3                                             \cf2 \strokec2 # Place them next to each other using the division style\cf4 \cb1 \strokec4 \
\cb3                                             ], \cf6 \strokec6 style\cf4 \strokec4 =\{\cf8 \strokec8 'display'\cf4 \strokec4 : \cf8 \strokec8 'flex'\cf4 \strokec4 \}),  \cb1 \
\cb3                                           ]),\cb1 \
\cb3                                 \cb1 \
\cb3                                 \cf2 \strokec2 # Add Computed graphs\cf4 \cb1 \strokec4 \
\cb3                                 \cf2 \strokec2 # REVIEW3: Observe how we add an empty division and providing an id that will be updated during callback\cf4 \cb1 \strokec4 \
\cb3                                 html.Div([ ], \cf6 \strokec6 id\cf4 \strokec4 =\cf8 \strokec8 'plot1'\cf4 \strokec4 ),\cb1 \
\cb3     \cb1 \
\cb3                                 html.Div([\cb1 \
\cb3                                         html.Div([ ], \cf6 \strokec6 id\cf4 \strokec4 =\cf8 \strokec8 'plot2'\cf4 \strokec4 ),\cb1 \
\cb3                                         html.Div([ ], \cf6 \strokec6 id\cf4 \strokec4 =\cf8 \strokec8 'plot3'\cf4 \strokec4 )\cb1 \
\cb3                                 ], \cf6 \strokec6 style\cf4 \strokec4 =\{\cf8 \strokec8 'display'\cf4 \strokec4 : \cf8 \strokec8 'flex'\cf4 \strokec4 \}),\cb1 \
\cb3                                 \cb1 \
\cb3                                 \cf2 \strokec2 # TASK3: Add a division with two empty divisions inside. See above disvision for example.\cf4 \cb1 \strokec4 \
\cb3                                 \cf2 \strokec2 # Enter your code below. Make sure you have correct formatting.\cf4 \cb1 \strokec4 \
\cb3                                html.Div([\cb1 \
\cb3                                         html.Div([ ], \cf6 \strokec6 id\cf4 \strokec4 =\cf8 \strokec8 'plot4'\cf4 \strokec4 ),\cb1 \
\cb3                                         html.Div([ ], \cf6 \strokec6 id\cf4 \strokec4 =\cf8 \strokec8 'plot5'\cf4 \strokec4 )\cb1 \
\cb3                                 ], \cf6 \strokec6 style\cf4 \strokec4 =\{\cf8 \strokec8 'display'\cf4 \strokec4 : \cf8 \strokec8 'flex'\cf4 \strokec4 \}),])\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # Callback function definition\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 # TASK4: Add 5 ouput components\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 # Enter your code below. Make sure you have correct formatting.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \cb3 \strokec10 @app.callback\cf4 \strokec4 ( [Output(\cf6 \strokec6 component_id\cf4 \strokec4 =\cf8 \strokec8 'plot1'\cf4 \strokec4 ,\cf6 \strokec6 component_property\cf4 \strokec4 =\cf8 \strokec8 'children'\cf4 \strokec4 ),\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3                Output(\cf6 \strokec6 component_id\cf4 \strokec4 =\cf8 \strokec8 'plot2'\cf4 \strokec4 ,\cf6 \strokec6 component_property\cf4 \strokec4 =\cf8 \strokec8 'children'\cf4 \strokec4 ),\cb1 \
\cb3                Output(\cf6 \strokec6 component_id\cf4 \strokec4 =\cf8 \strokec8 'plot3'\cf4 \strokec4 ,\cf6 \strokec6 component_property\cf4 \strokec4 =\cf8 \strokec8 'children'\cf4 \strokec4 ),\cb1 \
\cb3                Output(\cf6 \strokec6 component_id\cf4 \strokec4 =\cf8 \strokec8 'plot4'\cf4 \strokec4 ,\cf6 \strokec6 component_property\cf4 \strokec4 =\cf8 \strokec8 'children'\cf4 \strokec4 ),\cb1 \
\cb3                Output(\cf6 \strokec6 component_id\cf4 \strokec4 =\cf8 \strokec8 'plot5'\cf4 \strokec4 ,\cf6 \strokec6 component_property\cf4 \strokec4 =\cf8 \strokec8 'children'\cf4 \strokec4 )],\cb1 \
\cb3                [Input(\cf6 \strokec6 component_id\cf4 \strokec4 =\cf8 \strokec8 'input-type'\cf4 \strokec4 , \cf6 \strokec6 component_property\cf4 \strokec4 =\cf8 \strokec8 'value'\cf4 \strokec4 ),\cb1 \
\cb3                 Input(\cf6 \strokec6 component_id\cf4 \strokec4 =\cf8 \strokec8 'input-year'\cf4 \strokec4 , \cf6 \strokec6 component_property\cf4 \strokec4 =\cf8 \strokec8 'value'\cf4 \strokec4 )],\cb1 \
\cb3                [Input(\cf6 \strokec6 component_id\cf4 \strokec4 =\cf8 \strokec8 'input-type'\cf4 \strokec4 , \cf6 \strokec6 component_property\cf4 \strokec4 =\cf8 \strokec8 'value'\cf4 \strokec4 ),\cb1 \
\cb3                 Input(\cf6 \strokec6 component_id\cf4 \strokec4 =\cf8 \strokec8 'input-year'\cf4 \strokec4 , \cf6 \strokec6 component_property\cf4 \strokec4 =\cf8 \strokec8 'value'\cf4 \strokec4 )],\cb1 \
\cb3                \cf2 \strokec2 # REVIEW4: Holding output state till user enters all the form information. In this case, it will be chart type and year\cf4 \cb1 \strokec4 \
\cb3                [State(\cf8 \strokec8 "plot1"\cf4 \strokec4 , \cf8 \strokec8 'children'\cf4 \strokec4 ), State(\cf8 \strokec8 "plot2"\cf4 \strokec4 , \cf8 \strokec8 "children"\cf4 \strokec4 ),\cb1 \
\cb3                 State(\cf8 \strokec8 "plot3"\cf4 \strokec4 , \cf8 \strokec8 "children"\cf4 \strokec4 ), State(\cf8 \strokec8 "plot4"\cf4 \strokec4 , \cf8 \strokec8 "children"\cf4 \strokec4 ),\cb1 \
\cb3                 State(\cf8 \strokec8 "plot5"\cf4 \strokec4 , \cf8 \strokec8 "children"\cf4 \strokec4 )\cb1 \
\cb3                ])\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # Add computation to callback function and return graph\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb3 \strokec7 def\cf4 \strokec4  \cf10 \strokec10 get_graph\cf4 \strokec4 (\cf6 \strokec6 chart\cf4 \strokec4 , \cf6 \strokec6 year\cf4 \strokec4 , \cf6 \strokec6 children1\cf4 \strokec4 , \cf6 \strokec6 children2\cf4 \strokec4 , \cf6 \strokec6 c3\cf4 \strokec4 , \cf6 \strokec6 c4\cf4 \strokec4 , \cf6 \strokec6 c5\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3       \cb1 \
\cb3         \cf2 \strokec2 # Select data\cf4 \cb1 \strokec4 \
\cb3         df =  airline_data[airline_data[\cf8 \strokec8 'Year'\cf4 \strokec4 ]==\cf9 \strokec9 int\cf4 \strokec4 (year)]\cb1 \
\cb3        \cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  chart == \cf8 \strokec8 'OPT1'\cf4 \strokec4 :\cb1 \
\cb3             \cf2 \strokec2 # Compute required information for creating graph from the data\cf4 \cb1 \strokec4 \
\cb3             bar_data, line_data, div_data, map_data, tree_data = compute_data_choice_1(df)\cb1 \
\cb3             \cb1 \
\cb3             \cf2 \strokec2 # Number of flights under different cancellation categories\cf4 \cb1 \strokec4 \
\cb3             bar_fig = px.bar(bar_data, \cf6 \strokec6 x\cf4 \strokec4 =\cf8 \strokec8 'Month'\cf4 \strokec4 , \cf6 \strokec6 y\cf4 \strokec4 =\cf8 \strokec8 'Flights'\cf4 \strokec4 , \cf6 \strokec6 color\cf4 \strokec4 =\cf8 \strokec8 'CancellationCode'\cf4 \strokec4 , \cf6 \strokec6 title\cf4 \strokec4 =\cf8 \strokec8 'Monthly Flight Cancellation'\cf4 \strokec4 )\cb1 \
\cb3             \cb1 \
\cb3             \cf2 \strokec2 # TASK5: Average flight time by reporting airline\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 # Enter your code below. Make sure you have correct formatting.\cf4 \cb1 \strokec4 \
\cb3             figure_name = px.line(line_data, \cf6 \strokec6 x\cf4 \strokec4 =\cf8 \strokec8 'Month'\cf4 \strokec4 , \cf6 \strokec6 y\cf4 \strokec4 =\cf8 \strokec8 'AirTime'\cf4 \strokec4 , \cf6 \strokec6 color\cf4 \strokec4 =\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 , \cf6 \strokec6 title\cf4 \strokec4 =\cf8 \strokec8 'Average monthly delay time (minutes) by airline'\cf4 \strokec4 )\cb1 \
\cb3             \cb1 \
\cb3             \cf2 \strokec2 # Percentage of diverted airport landings per reporting airline\cf4 \cb1 \strokec4 \
\cb3             pie_fig = px.pie(div_data, \cf6 \strokec6 values\cf4 \strokec4 =\cf8 \strokec8 'Flights'\cf4 \strokec4 , \cf6 \strokec6 names\cf4 \strokec4 =\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 , \cf6 \strokec6 title\cf4 \strokec4 =\cf8 \strokec8 '\cf7 \strokec7 % o\cf8 \strokec8 f flights by reporting airline'\cf4 \strokec4 )\cb1 \
\cb3             \cb1 \
\cb3             \cf2 \strokec2 # REVIEW5: Number of flights flying from each state using choropleth\cf4 \cb1 \strokec4 \
\cb3             map_fig = px.choropleth(map_data,  \cf2 \strokec2 # Input data\cf4 \cb1 \strokec4 \
\cb3                     \cf6 \strokec6 locations\cf4 \strokec4 =\cf8 \strokec8 'OriginState'\cf4 \strokec4 , \cb1 \
\cb3                     \cf6 \strokec6 color\cf4 \strokec4 =\cf8 \strokec8 'Flights'\cf4 \strokec4 ,  \cb1 \
\cb3                     \cf6 \strokec6 hover_data\cf4 \strokec4 =[\cf8 \strokec8 'OriginState'\cf4 \strokec4 , \cf8 \strokec8 'Flights'\cf4 \strokec4 ], \cb1 \
\cb3                     \cf6 \strokec6 locationmode\cf4 \strokec4  = \cf8 \strokec8 'USA-states'\cf4 \strokec4 , \cf2 \strokec2 # Set to plot as US States\cf4 \cb1 \strokec4 \
\cb3                     \cf6 \strokec6 color_continuous_scale\cf4 \strokec4 =\cf8 \strokec8 'GnBu'\cf4 \strokec4 ,\cb1 \
\cb3                     \cf6 \strokec6 range_color\cf4 \strokec4 =[\cf11 \strokec11 0\cf4 \strokec4 , map_data[\cf8 \strokec8 'Flights'\cf4 \strokec4 ].max()]) \cb1 \
\cb3             map_fig.update_layout(\cb1 \
\cb3                     \cf6 \strokec6 title_text\cf4 \strokec4  = \cf8 \strokec8 'Number of flights from origin state'\cf4 \strokec4 , \cb1 \
\cb3                     \cf6 \strokec6 geo_scope\cf4 \strokec4 =\cf8 \strokec8 'usa'\cf4 \strokec4 ) \cf2 \strokec2 # Plot only the USA instead of globe\cf4 \cb1 \strokec4 \
\cb3             \cb1 \
\cb3             \cf2 \strokec2 # TASK6: Number of flights flying to each state from each reporting airline\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 # Enter your code below. Make sure you have correct formatting.\cf4 \cb1 \strokec4 \
\cb3             tree_fig = px.treemap(data, \cf6 \strokec6 path\cf4 \strokec4 =[\cf8 \strokec8 'DestState'\cf4 \strokec4 , \cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 ], \cb1 \
\cb3                       \cf6 \strokec6 values\cf4 \strokec4 =\cf8 \strokec8 'Flights'\cf4 \strokec4 ,\cb1 \
\cb3                       \cf6 \strokec6 color\cf4 \strokec4 =\cf8 \strokec8 'Flights'\cf4 \strokec4 ,\cb1 \
\cb3                       \cf6 \strokec6 color_continuous_scale\cf4 \strokec4 =\cf8 \strokec8 'RdBu'\cf4 \strokec4 ,\cb1 \
\cb3                       \cf6 \strokec6 title\cf4 \strokec4 =\cf8 \strokec8 'Flight count by airline to destination state'\cf4 \strokec4 )\cb1 \
\cb3             \cb1 \
\cb3             \cb1 \
\cb3             \cf2 \strokec2 # REVIEW6: Return dcc.Graph component to the empty division\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 return\cf4 \strokec4  [dcc.Graph(\cf6 \strokec6 figure\cf4 \strokec4 =tree_fig), \cb1 \
\cb3                     dcc.Graph(\cf6 \strokec6 figure\cf4 \strokec4 =pie_fig),\cb1 \
\cb3                     dcc.Graph(\cf6 \strokec6 figure\cf4 \strokec4 =map_fig),\cb1 \
\cb3                     dcc.Graph(\cf6 \strokec6 figure\cf4 \strokec4 =bar_fig),\cb1 \
\cb3                     dcc.Graph(\cf6 \strokec6 figure\cf4 \strokec4 =line_fig)\cb1 \
\cb3                    ]\cb1 \
\cb3         \cf5 \strokec5 else\cf4 \strokec4 :\cb1 \
\cb3             \cf2 \strokec2 # REVIEW7: This covers chart type 2 and we have completed this exercise under Flight Delay Time Statistics Dashboard section\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 # Compute required information for creating graph from the data\cf4 \cb1 \strokec4 \
\cb3             avg_car, avg_weather, avg_NAS, avg_sec, avg_late = compute_data_choice_2(df)\cb1 \
\cb3             \cb1 \
\cb3             \cf2 \strokec2 # Create graph\cf4 \cb1 \strokec4 \
\cb3             carrier_fig = px.line(avg_car, \cf6 \strokec6 x\cf4 \strokec4 =\cf8 \strokec8 'Month'\cf4 \strokec4 , \cf6 \strokec6 y\cf4 \strokec4 =\cf8 \strokec8 'CarrierDelay'\cf4 \strokec4 , \cf6 \strokec6 color\cf4 \strokec4 =\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 , \cf6 \strokec6 title\cf4 \strokec4 =\cf8 \strokec8 'Average carrrier delay time (minutes) by airline'\cf4 \strokec4 )\cb1 \
\cb3             weather_fig = px.line(avg_weather, \cf6 \strokec6 x\cf4 \strokec4 =\cf8 \strokec8 'Month'\cf4 \strokec4 , \cf6 \strokec6 y\cf4 \strokec4 =\cf8 \strokec8 'WeatherDelay'\cf4 \strokec4 , \cf6 \strokec6 color\cf4 \strokec4 =\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 , \cf6 \strokec6 title\cf4 \strokec4 =\cf8 \strokec8 'Average weather delay time (minutes) by airline'\cf4 \strokec4 )\cb1 \
\cb3             nas_fig = px.line(avg_NAS, \cf6 \strokec6 x\cf4 \strokec4 =\cf8 \strokec8 'Month'\cf4 \strokec4 , \cf6 \strokec6 y\cf4 \strokec4 =\cf8 \strokec8 'NASDelay'\cf4 \strokec4 , \cf6 \strokec6 color\cf4 \strokec4 =\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 , \cf6 \strokec6 title\cf4 \strokec4 =\cf8 \strokec8 'Average NAS delay time (minutes) by airline'\cf4 \strokec4 )\cb1 \
\cb3             sec_fig = px.line(avg_sec, \cf6 \strokec6 x\cf4 \strokec4 =\cf8 \strokec8 'Month'\cf4 \strokec4 , \cf6 \strokec6 y\cf4 \strokec4 =\cf8 \strokec8 'SecurityDelay'\cf4 \strokec4 , \cf6 \strokec6 color\cf4 \strokec4 =\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 , \cf6 \strokec6 title\cf4 \strokec4 =\cf8 \strokec8 'Average security delay time (minutes) by airline'\cf4 \strokec4 )\cb1 \
\cb3             late_fig = px.line(avg_late, \cf6 \strokec6 x\cf4 \strokec4 =\cf8 \strokec8 'Month'\cf4 \strokec4 , \cf6 \strokec6 y\cf4 \strokec4 =\cf8 \strokec8 'LateAircraftDelay'\cf4 \strokec4 , \cf6 \strokec6 color\cf4 \strokec4 =\cf8 \strokec8 'Reporting_Airline'\cf4 \strokec4 , \cf6 \strokec6 title\cf4 \strokec4 =\cf8 \strokec8 'Average late aircraft delay time (minutes) by airline'\cf4 \strokec4 )\cb1 \
\cb3             \cb1 \
\cb3             \cf5 \strokec5 return\cf4 \strokec4 [dcc.Graph(\cf6 \strokec6 figure\cf4 \strokec4 =carrier_fig), \cb1 \
\cb3                    dcc.Graph(\cf6 \strokec6 figure\cf4 \strokec4 =weather_fig), \cb1 \
\cb3                    dcc.Graph(\cf6 \strokec6 figure\cf4 \strokec4 =nas_fig), \cb1 \
\cb3                    dcc.Graph(\cf6 \strokec6 figure\cf4 \strokec4 =sec_fig), \cb1 \
\cb3                    dcc.Graph(\cf6 \strokec6 figure\cf4 \strokec4 =late_fig)]\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 # Run the app\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb3 \strokec5 if\cf4 \strokec4  \cf6 \strokec6 __name__\cf4 \strokec4  == \cf8 \strokec8 '__main__'\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     app.run_server()\cb1 \
}